CCS PCM C Compiler, Version 5.025, 5967               23-Oct-17 16:52

               Filename:   C:\Users\Dung Phan\Documents\STEP\main.lst

               ROM used:   114 words (1%)
                           Largest free fragment is 2048
               RAM used:   5 (1%) at main() level
                           6 (2%) worst case
               Stack used: 1 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   018
0003:  NOP
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=20000000) 
0004:  MOVLW  21
0005:  MOVWF  04
0006:  BCF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   017
000A:  MOVLW  06
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  7B
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  DECFSZ 00,F
0016:  GOTO   00A
0017:  RETURN
....................  
....................  
....................  
.................... #define A PIN_D1 
.................... #define B PIN_D2 
.................... #define C PIN_D3 
.................... #define D PIN_D4 
....................  
....................  
.................... void main() 
0018:  MOVF   03,W
0019:  ANDLW  1F
001A:  MOVWF  03
001B:  BSF    03.5
001C:  BSF    1F.0
001D:  BSF    1F.1
001E:  BSF    1F.2
001F:  BCF    1F.3
0020:  MOVLW  07
0021:  MOVWF  1C
0022:  BCF    03.7
.................... { 
....................  
....................    while(TRUE) 
....................    { 
....................  
....................       output_bit(A,1); 
0023:  BCF    03.5
0024:  BSF    08.1
0025:  BSF    03.5
0026:  BCF    08.1
....................       output_bit(B,0); 
0027:  BCF    03.5
0028:  BCF    08.2
0029:  BSF    03.5
002A:  BCF    08.2
....................       output_bit(C,1); 
002B:  BCF    03.5
002C:  BSF    08.3
002D:  BSF    03.5
002E:  BCF    08.3
....................       output_bit(D,0); 
002F:  BCF    03.5
0030:  BCF    08.4
0031:  BSF    03.5
0032:  BCF    08.4
....................       delay_ms(70); 
0033:  MOVLW  46
0034:  BCF    03.5
0035:  MOVWF  21
0036:  CALL   004
....................       output_bit(A,0); 
0037:  BCF    08.1
0038:  BSF    03.5
0039:  BCF    08.1
....................       output_bit(B,1); 
003A:  BCF    03.5
003B:  BSF    08.2
003C:  BSF    03.5
003D:  BCF    08.2
....................       output_bit(C,1); 
003E:  BCF    03.5
003F:  BSF    08.3
0040:  BSF    03.5
0041:  BCF    08.3
....................       output_bit(D,0); 
0042:  BCF    03.5
0043:  BCF    08.4
0044:  BSF    03.5
0045:  BCF    08.4
....................       delay_ms(70); 
0046:  MOVLW  46
0047:  BCF    03.5
0048:  MOVWF  21
0049:  CALL   004
....................       output_bit(A,0); 
004A:  BCF    08.1
004B:  BSF    03.5
004C:  BCF    08.1
....................       output_bit(B,1); 
004D:  BCF    03.5
004E:  BSF    08.2
004F:  BSF    03.5
0050:  BCF    08.2
....................       output_bit(C,0); 
0051:  BCF    03.5
0052:  BCF    08.3
0053:  BSF    03.5
0054:  BCF    08.3
....................       output_bit(D,1); 
0055:  BCF    03.5
0056:  BSF    08.4
0057:  BSF    03.5
0058:  BCF    08.4
....................       delay_ms(70); 
0059:  MOVLW  46
005A:  BCF    03.5
005B:  MOVWF  21
005C:  CALL   004
....................       output_bit(A,1); 
005D:  BSF    08.1
005E:  BSF    03.5
005F:  BCF    08.1
....................       output_bit(B,0); 
0060:  BCF    03.5
0061:  BCF    08.2
0062:  BSF    03.5
0063:  BCF    08.2
....................       output_bit(C,0); 
0064:  BCF    03.5
0065:  BCF    08.3
0066:  BSF    03.5
0067:  BCF    08.3
....................       output_bit(D,1); 
0068:  BCF    03.5
0069:  BSF    08.4
006A:  BSF    03.5
006B:  BCF    08.4
....................       delay_ms(70); 
006C:  MOVLW  46
006D:  BCF    03.5
006E:  MOVWF  21
006F:  CALL   004
0070:  GOTO   024
....................    } 
....................  
.................... } 
0071:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
